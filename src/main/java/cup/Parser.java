
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cup;

import java_cup.runtime.Symbol;
import errors.TokenError;
import errors.ErrorHandler;
import interpret.contexts.*;
import interpret.contracts.*;
import interpret.match.*;
import interpret.nodos.*;
import interpret.random.*;
import interpret.nodos.conditionals.*;
import interpret.nodos.functions.*;
import interpret.nodos.states.*;
import interpret.nodos.types.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\004\000\002\007\016\000\002\023\003" +
    "\000\002\023\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\026\003\000\002" +
    "\026\005\000\002\025\005\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\013\006\000\002\013\004" +
    "\000\002\012\003\000\002\012\005\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\027\003\000\002\027\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\031\003\000\002\031\004\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\003\000\002\033" +
    "\003\000\002\033\005\000\002\033\005\000\002\014\003" +
    "\000\002\017\010\000\002\020\006\000\002\021\010\000" +
    "\002\022\010\000\002\004\003\000\002\004\004\000\002" +
    "\005\026\000\002\016\025\000\002\006\006\000\002\011" +
    "\014\000\002\011\015\000\002\010\003\000\002\010\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\004\004\007\001\002\000\004\002\251\001" +
    "\002\000\006\004\007\005\143\001\002\000\006\004\uffff" +
    "\005\uffff\001\002\000\004\067\010\001\002\000\004\046" +
    "\011\001\002\000\004\007\012\001\002\000\004\054\013" +
    "\001\002\000\006\031\016\032\015\001\002\000\004\010" +
    "\017\001\002\000\012\010\ufffb\051\ufffb\053\ufffb\055\ufffb" +
    "\001\002\000\012\010\ufffc\051\ufffc\053\ufffc\055\ufffc\001" +
    "\002\000\004\054\020\001\002\000\004\052\021\001\002" +
    "\000\006\011\025\013\023\001\002\000\006\053\137\055" +
    "\136\001\002\000\014\031\016\032\015\063\100\064\104" +
    "\065\036\001\002\000\006\053\uffee\055\uffee\001\002\000" +
    "\034\033\035\034\045\037\032\052\037\056\051\057\043" +
    "\060\033\061\052\062\031\065\036\066\030\070\034\071" +
    "\042\001\002\000\026\012\uffeb\035\uffeb\036\uffeb\040\uffeb" +
    "\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\051\uffeb\001" +
    "\002\000\024\012\uffe1\035\uffe1\036\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\043\uffe1\044\uffe1\045\uffe1\001\002\000\004\050" +
    "\130\001\002\000\030\012\ufff2\035\ufff2\036\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\051\ufff2\055" +
    "\ufff2\001\002\000\032\033\035\034\045\052\037\056\051" +
    "\057\043\060\033\061\052\062\031\065\036\066\030\070" +
    "\034\071\042\001\002\000\026\012\uffe9\035\uffe9\036\uffe9" +
    "\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\051" +
    "\uffe9\001\002\000\024\012\uffe4\035\uffe4\036\uffe4\040\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\001\002\000" +
    "\024\012\uffe7\035\uffe7\036\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\001\002\000\004\050\122\001" +
    "\002\000\014\031\016\032\015\063\100\064\104\065\036" +
    "\001\002\000\010\012\uffd8\035\uffd8\036\uffd8\001\002\000" +
    "\030\012\ufff1\035\ufff1\036\ufff1\040\ufff1\041\ufff1\042\ufff1" +
    "\043\ufff1\044\ufff1\045\ufff1\051\ufff1\055\ufff1\001\002\000" +
    "\026\012\uffec\035\uffec\036\uffec\040\uffec\041\uffec\042\uffec" +
    "\043\uffec\044\uffec\045\uffec\051\uffec\001\002\000\026\012" +
    "\uffe8\035\uffe8\036\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8" +
    "\044\uffe8\045\uffe8\051\uffe8\001\002\000\024\012\uffe5\035" +
    "\uffe5\036\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5" +
    "\045\uffe5\001\002\000\024\012\uffe6\035\uffe6\036\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\001\002" +
    "\000\024\012\uffe3\035\uffe3\036\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\045\uffe3\001\002\000\024\012\uffe2" +
    "\035\uffe2\036\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\001\002\000\004\012\075\001\002\000\026" +
    "\012\uffea\035\uffea\036\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\045\uffea\051\uffea\001\002\000\030\012\ufff3" +
    "\035\ufff3\036\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044" +
    "\ufff3\045\ufff3\051\ufff3\055\ufff3\001\002\000\010\012\uffd5" +
    "\035\071\036\072\001\002\000\024\012\uffd9\035\uffd9\036" +
    "\uffd9\040\056\041\062\042\061\043\060\044\057\045\055" +
    "\001\002\000\034\033\035\034\045\037\032\052\037\056" +
    "\051\057\043\060\033\061\052\062\031\065\036\066\030" +
    "\070\034\071\042\001\002\000\034\033\035\034\045\037" +
    "\032\052\037\056\051\057\043\060\033\061\052\062\031" +
    "\065\036\066\030\070\034\071\042\001\002\000\034\033" +
    "\035\034\045\037\032\052\037\056\051\057\043\060\033" +
    "\061\052\062\031\065\036\066\030\070\034\071\042\001" +
    "\002\000\034\033\035\034\045\037\032\052\037\056\051" +
    "\057\043\060\033\061\052\062\031\065\036\066\030\070" +
    "\034\071\042\001\002\000\034\033\035\034\045\037\032" +
    "\052\037\056\051\057\043\060\033\061\052\062\031\065" +
    "\036\066\030\070\034\071\042\001\002\000\034\033\035" +
    "\034\045\037\032\052\037\056\051\057\043\060\033\061" +
    "\052\062\031\065\036\066\030\070\034\071\042\001\002" +
    "\000\010\012\uffde\035\uffde\036\uffde\001\002\000\010\012" +
    "\uffdd\035\uffdd\036\uffdd\001\002\000\010\012\uffdc\035\uffdc" +
    "\036\uffdc\001\002\000\010\012\uffdb\035\uffdb\036\uffdb\001" +
    "\002\000\010\012\uffdf\035\uffdf\036\uffdf\001\002\000\010" +
    "\012\uffda\035\uffda\036\uffda\001\002\000\034\033\035\034" +
    "\045\037\032\052\037\056\051\057\043\060\033\061\052" +
    "\062\031\065\036\066\030\070\034\071\042\001\002\000" +
    "\034\033\035\034\045\037\032\052\037\056\051\057\043" +
    "\060\033\061\052\062\031\065\036\066\030\070\034\071" +
    "\042\001\002\000\010\012\uffd6\035\uffd6\036\uffd6\001\002" +
    "\000\010\012\uffd7\035\uffd7\036\uffd7\001\002\000\014\031" +
    "\016\032\015\063\100\064\104\065\036\001\002\000\010" +
    "\051\ufff7\053\ufff7\055\ufff7\001\002\000\010\051\ufffa\053" +
    "\ufffa\055\ufffa\001\002\000\004\050\110\001\002\000\006" +
    "\053\ufff0\055\ufff0\001\002\000\010\051\ufff9\053\ufff9\055" +
    "\ufff9\001\002\000\010\051\ufff8\053\ufff8\055\ufff8\001\002" +
    "\000\004\050\105\001\002\000\012\052\037\061\052\062" +
    "\031\066\030\001\002\000\004\051\107\001\002\000\010" +
    "\051\uffd3\053\uffd3\055\uffd3\001\002\000\012\052\037\061" +
    "\052\062\031\066\030\001\002\000\004\055\112\001\002" +
    "\000\014\056\051\057\043\060\033\065\036\071\042\001" +
    "\002\000\004\051\114\001\002\000\010\051\uffd4\053\uffd4" +
    "\055\uffd4\001\002\000\006\053\120\055\117\001\002\000" +
    "\006\053\ufff6\055\ufff6\001\002\000\014\031\016\032\015" +
    "\063\100\064\104\065\036\001\002\000\030\012\ufff4\035" +
    "\ufff4\036\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4" +
    "\045\ufff4\051\ufff4\055\ufff4\001\002\000\006\053\ufff5\055" +
    "\ufff5\001\002\000\012\052\037\061\052\062\031\066\030" +
    "\001\002\000\004\055\124\001\002\000\014\031\016\032" +
    "\015\063\100\064\104\065\036\001\002\000\004\051\126" +
    "\001\002\000\032\012\uffd2\035\uffd2\036\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\051\uffd2\053\uffd2" +
    "\055\uffd2\001\002\000\024\012\uffe0\035\uffe0\036\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\001\002" +
    "\000\012\052\037\061\052\062\031\066\030\001\002\000" +
    "\004\055\132\001\002\000\014\056\051\057\043\060\033" +
    "\065\036\071\042\001\002\000\004\051\134\001\002\000" +
    "\030\012\uffd1\035\uffd1\036\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\051\uffd1\055\uffd1\001\002\000" +
    "\006\053\uffef\055\uffef\001\002\000\006\011\025\013\023" +
    "\001\002\000\004\047\140\001\002\000\006\004\ufffd\005" +
    "\ufffd\001\002\000\006\053\uffed\055\uffed\001\002\000\006" +
    "\004\ufffe\005\ufffe\001\002\000\004\067\203\001\002\000" +
    "\006\005\uffd0\006\uffd0\001\002\000\006\005\143\006\147" +
    "\001\002\000\006\005\uffcf\006\uffcf\001\002\000\004\046" +
    "\151\001\002\000\004\002\000\001\002\000\004\015\153" +
    "\001\002\000\006\015\170\047\171\001\002\000\004\052" +
    "\154\001\002\000\004\067\155\001\002\000\006\053\uffc9" +
    "\055\uffc9\001\002\000\006\053\160\055\157\001\002\000" +
    "\004\067\167\001\002\000\004\016\161\001\002\000\004" +
    "\046\162\001\002\000\004\017\163\001\002\000\004\054" +
    "\164\001\002\000\004\071\165\001\002\000\004\047\166" +
    "\001\002\000\006\015\uffcb\047\uffcb\001\002\000\006\053" +
    "\uffc8\055\uffc8\001\002\000\004\052\172\001\002\000\004" +
    "\002\uffcc\001\002\000\004\067\155\001\002\000\006\053" +
    "\174\055\157\001\002\000\004\016\175\001\002\000\004" +
    "\046\176\001\002\000\004\017\177\001\002\000\004\054" +
    "\200\001\002\000\004\071\201\001\002\000\004\047\202" +
    "\001\002\000\006\015\uffca\047\uffca\001\002\000\004\046" +
    "\204\001\002\000\004\020\205\001\002\000\004\021\206" +
    "\001\002\000\004\054\207\001\002\000\004\052\210\001" +
    "\002\000\004\067\211\001\002\000\004\055\212\001\002" +
    "\000\004\067\213\001\002\000\004\053\214\001\002\000" +
    "\004\022\215\001\002\000\004\054\216\001\002\000\004" +
    "\071\217\001\002\000\004\014\220\001\002\000\004\054" +
    "\221\001\002\000\004\046\222\001\002\000\004\023\224" +
    "\001\002\000\004\047\247\001\002\000\004\024\225\001" +
    "\002\000\004\054\226\001\002\000\004\071\227\001\002" +
    "\000\004\055\230\001\002\000\004\023\231\001\002\000" +
    "\004\025\232\001\002\000\004\054\233\001\002\000\004" +
    "\071\234\001\002\000\004\055\235\001\002\000\004\026" +
    "\236\001\002\000\004\027\237\001\002\000\004\054\240" +
    "\001\002\000\004\071\241\001\002\000\004\055\242\001" +
    "\002\000\004\026\243\001\002\000\004\030\244\001\002" +
    "\000\004\054\245\001\002\000\004\071\246\001\002\000" +
    "\004\047\uffcd\001\002\000\004\047\250\001\002\000\006" +
    "\005\uffce\006\uffce\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\010\002\003\003\004\007\005\001\001\000" +
    "\002\001\001\000\010\004\144\005\143\007\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\021\013\023" +
    "\001\001\000\002\001\001\000\014\017\101\020\102\021" +
    "\075\023\076\024\134\001\001\000\002\001\001\000\026" +
    "\014\047\015\045\021\025\022\040\025\043\027\046\030" +
    "\026\031\053\032\037\033\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\015\045\021\025\022\040\025\043\027\046\030\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\101\020\102\021\075" +
    "\023\076\024\115\026\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\045\021" +
    "\025\022\040\025\043\027\046\030\026\031\067\001\001" +
    "\000\020\015\045\021\025\022\040\025\043\027\046\030" +
    "\026\031\066\001\001\000\020\015\045\021\025\022\040" +
    "\025\043\027\046\030\026\031\065\001\001\000\020\015" +
    "\045\021\025\022\040\025\043\027\046\030\026\031\064" +
    "\001\001\000\020\015\045\021\025\022\040\025\043\027" +
    "\046\030\026\031\063\001\001\000\020\015\045\021\025" +
    "\022\040\025\043\027\046\030\026\031\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\045\021\025\022\040\025\043\027\046\030\026\031\053" +
    "\032\073\001\001\000\022\015\045\021\025\022\040\025" +
    "\043\027\046\030\026\031\053\032\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\101\020\102\021" +
    "\075\023\076\024\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\040" +
    "\025\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\040\025\110\001\001\000\002\001\001\000\006" +
    "\015\112\021\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\101" +
    "\020\102\021\075\023\076\024\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\040\025\122\001\001" +
    "\000\002\001\001\000\014\017\101\020\102\021\075\023" +
    "\076\024\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\040\025\130\001\001\000" +
    "\002\001\001\000\006\015\132\021\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\145\006\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private ErrorHandler errorHandler = ErrorHandler.getInstance();

public void syntax_error(Symbol s) {
        TokenError error = new TokenError(
            "Sintáctico",
            s.left,
            s.right,
            String.valueOf(s.value),
            "Error sintáctico",
            "No se esperaba este componente: " + s.value,
            "Parser.cup"
        );
        errorHandler.addError(error);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        TokenError error = new TokenError(
            "Léxico",
            s.left,
            s.right,
            String.valueOf(s.value),
            "Error léxico",
            "Componente no reconocido: " + s.value,
            "Parser.cup"
        );
        errorHandler.addError(error);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression start_val = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= StrategiesSection MatchesSection MainSection 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> s = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> m = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int msright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression ms = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoProgram(s, m, ms); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // StrategiesSection ::= StrategyBody 
            {
              List<Expression> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        List<Expression> strategies = new ArrayList<>();
        strategies.add(s);
        RESULT = strategies;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StrategiesSection",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // StrategiesSection ::= StrategiesSection StrategyBody 
            {
              List<Expression> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> s = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        s.add(b);
        RESULT = s;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StrategiesSection",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // StrategyBody ::= STRATEGY ID LBRACE INITIAL COLON Action RULES COLON LBRACKET RuleList RBRACKET RBRACE 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expression a = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<NodoRule> r = (List<NodoRule>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodoStrategy(id, a, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StrategyBody",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Action ::= C 
            {
              Expression RESULT =null;
		int cooperationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cooperationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cooperation = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAction(cooperation); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Action",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Action ::= D 
            {
              Expression RESULT =null;
		int defectionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int defectionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String defection = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAction(defection); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Action",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SystemAction ::= Action 
            {
              Expression RESULT =null;
		int actionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression action = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = action; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SystemAction",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SystemAction ::= FunctionGetMove 
            {
              Expression RESULT =null;
		int actionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression action = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = action; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SystemAction",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SystemAction ::= FunctionLastMove 
            {
              Expression RESULT =null;
		int actionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression action = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = action; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SystemAction",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SystemAction ::= FunctionGetMovesCount 
            {
              Expression RESULT =null;
		int actionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression action = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = action; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SystemAction",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListAction ::= SystemAction 
            {
              List<Expression> RESULT =null;
		int sAleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sAright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression sA = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        List<Expression> actions = new ArrayList<>();
        actions.add(sA);
        RESULT = actions;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListAction",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ListAction ::= ListAction COMMA SystemAction 
            {
              List<Expression> RESULT =null;
		int lAleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lAright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> lA = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sAleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sAright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression sA = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        lA.add(sA);
        RESULT = lA;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListAction",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SystemListAction ::= LBRACKET ListAction RBRACKET 
            {
              Expression RESULT =null;
		int lAleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lAright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> lA = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoActionList(lA); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SystemListAction",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SystemListAction ::= OPPONENT_HISTORY 
            {
              Expression RESULT =null;
		int oHleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oHright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object oH = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoOpponentHistory(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SystemListAction",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SystemListAction ::= SELF_HISTORY 
            {
              Expression RESULT =null;
		int sHleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sHright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sH = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoSelfHistory(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SystemListAction",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SystemListAction ::= FunctionGetLastNMoves 
            {
              Expression RESULT =null;
		int fGleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fGright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression fG = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fG; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SystemListAction",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Rule ::= IF Condition THEN SystemAction 
            {
              NodoRule RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sAleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sAright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression sA = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new NodoRule(c, sA);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rule",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Rule ::= ELSE SystemAction 
            {
              NodoRule RESULT =null;
		int sAleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sAright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression sA = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new NodoRule(null, sA);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rule",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RuleList ::= Rule 
            {
              List<NodoRule> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoRule r = (NodoRule)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        List<NodoRule> rules = new ArrayList<>();
        rules.add(r);
        RESULT = rules;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RuleList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // RuleList ::= RuleList COMMA Rule 
            {
              List<NodoRule> RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<NodoRule> rl = (List<NodoRule>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoRule r = (NodoRule)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        rl.add(r);
        RESULT = rl;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RuleList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SystemInteger ::= INTLIT 
            {
              Expression RESULT =null;
		int int1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int int1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String int1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoInt(Integer.parseInt(int1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SystemInteger",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SystemInteger ::= FunctionGetMovesCount 
            {
              Expression RESULT =null;
		int int2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int int2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression int2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = int2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SystemInteger",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SystemInteger ::= ROUND_NUMBER 
            {
              Expression RESULT =null;
		int int3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int int3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object int3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoRoundNumber(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SystemInteger",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SystemInteger ::= TOTAL_ROUNDS 
            {
              Expression RESULT =null;
		int int3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int int3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object int3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTotalRounds(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SystemInteger",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SystemInteger ::= RANDOM 
            {
              Expression RESULT =null;
		int int4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int int4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object int4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoRandom(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SystemInteger",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BOOL ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new NodoBoolean(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BOOL ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new NodoBoolean(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Factor ::= SystemListAction 
            {
              Expression RESULT =null;
		int sAleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sAright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression sA = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sA; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Factor ::= FLOATLIT 
            {
              Expression RESULT =null;
		int fLleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fLright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fL = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoFloat(Float.parseFloat(fL)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Factor ::= SystemInteger 
            {
              Expression RESULT =null;
		int sIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression sI = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sI; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Factor ::= BOOL 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FactorNot ::= Factor 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FactorNot",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FactorNot ::= NOT Factor 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoNot(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FactorNot",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Comparison ::= FactorNot EQ FactorNot 
            {
              Expression RESULT =null;
		int fNleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fNright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression fN = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fN2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fN2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression fN2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoComparison(fN, fN2, NodoComparison.Operator.EQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Comparison",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Comparison ::= FactorNot NEQ FactorNot 
            {
              Expression RESULT =null;
		int fNleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fNright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression fN = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fN2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fN2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression fN2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoComparison(fN, fN2, NodoComparison.Operator.NEQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Comparison",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Comparison ::= FactorNot GE FactorNot 
            {
              Expression RESULT =null;
		int fNleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fNright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression fN = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fN2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fN2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression fN2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoComparison(fN, fN2, NodoComparison.Operator.GE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Comparison",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Comparison ::= FactorNot LE FactorNot 
            {
              Expression RESULT =null;
		int fNleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fNright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression fN = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fN2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fN2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression fN2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoComparison(fN, fN2, NodoComparison.Operator.LE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Comparison",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Comparison ::= FactorNot GT FactorNot 
            {
              Expression RESULT =null;
		int fNleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fNright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression fN = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fN2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fN2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression fN2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoComparison(fN, fN2, NodoComparison.Operator.GT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Comparison",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Comparison ::= FactorNot LT FactorNot 
            {
              Expression RESULT =null;
		int fNleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fNright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression fN = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fN2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fN2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression fN2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoComparison(fN, fN2, NodoComparison.Operator.LT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Comparison",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Comparison ::= FactorNot 
            {
              Expression RESULT =null;
		int fNleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fNright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression fN = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Comparison",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Term ::= Comparison 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Term ::= Term AND Comparison 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLogical(t, c, NodoLogical.Operator.AND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Term ::= Term OR Comparison 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLogical(t, c, NodoLogical.Operator.OR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Condition ::= Term 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FunctionGetMove ::= GET_MOVE LPAREN SystemListAction COMMA SystemInteger RPAREN 
            {
              Expression RESULT =null;
		int sAleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sAright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression sA = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression sI = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoGetMove(sA, sI); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionGetMove",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FunctionLastMove ::= LAST_MOVE LPAREN SystemListAction RPAREN 
            {
              Expression RESULT =null;
		int sLAleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sLAright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression sLA = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoLastMove(sLA); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionLastMove",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FunctionGetMovesCount ::= GET_MOVES_COUNT LPAREN SystemListAction COMMA SystemAction RPAREN 
            {
              Expression RESULT =null;
		int sLAleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sLAright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression sLA = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sAleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sAright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression sA = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoGetMovesCount(sLA, sA); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionGetMovesCount",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FunctionGetLastNMoves ::= GET_LAST_N_MOVES LPAREN SystemListAction COMMA SystemInteger RPAREN 
            {
              Expression RESULT =null;
		int sLAleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sLAright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression sLA = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression sI = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoGetLastNMoves(sLA, sI); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionGetLastNMoves",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MatchesSection ::= MatchBody 
            {
              List<Expression> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression m = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        List<Expression> matches = new ArrayList<>();
        matches.add(m);
        RESULT = matches;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchesSection",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MatchesSection ::= MatchesSection MatchBody 
            {
              List<Expression> RESULT =null;
		int msleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> ms = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression m = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ms.add(m);
        RESULT = ms;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchesSection",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MatchBody ::= MATCH ID LBRACE PLAYERS STRATEGIES COLON LBRACKET ID COMMA ID RBRACKET ROUNDS COLON INTLIT SCORING COLON LBRACE Scoring RBRACE RBRACE 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-18)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int int1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int int1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String int1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Scoring s = (Scoring)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodoMatch(id, id2, id3, Integer.parseInt(int1), s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchBody",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Scoring ::= MUTUAL COOPERATION COLON INTLIT COMMA MUTUAL DEFECTION COLON INTLIT COMMA BETRAYAL REWARD COLON INTLIT COMMA BETRAYAL PUNISHMENT COLON INTLIT 
            {
              Scoring RESULT =null;
		int int1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int int1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		String int1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int int2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int int2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String int2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int int3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int int3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String int3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int int4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int int4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String int4 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Scoring(Integer.parseInt(int1), Integer.parseInt(int2), Integer.parseInt(int3), Integer.parseInt(int4)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Scoring",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MainSection ::= MAIN LBRACE RunList RBRACE 
            {
              Expression RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<NodeRun> rl = (List<NodeRun>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoMain(rl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainSection",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RunList ::= RUN LBRACKET IdList RBRACKET WITH LBRACE SEED COLON INTLIT RBRACE 
            {
              List<NodeRun> RESULT =null;
		int iLleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<String> iL = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int int1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int int1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String int1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        List<NodeRun> runs = new ArrayList<>();
        runs.add(new NodeRun(iL, Long.parseLong(int1)));
        RESULT = runs;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RunList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RunList ::= RunList RUN LBRACKET IdList RBRACKET WITH LBRACE SEED COLON INTLIT RBRACE 
            {
              List<NodeRun> RESULT =null;
		int rLleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int rLright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		List<NodeRun> rL = (List<NodeRun>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int iLleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<String> iL = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int int1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int int1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String int1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        rL.add(new NodeRun(iL, Long.parseLong(int1)));
        RESULT = rL;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RunList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IdList ::= ID 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        List<String> ids = new ArrayList<>();
        ids.add(id);
        RESULT = ids;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IdList ::= IdList COMMA ID 
            {
              List<String> RESULT =null;
		int iLleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> iL = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        iL.add(id);
        RESULT = iL;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
