// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/java/jflex/Lexer.jflex

package jflex;

import java_cup.runtime.Symbol;
import cup.ParserSym;
import errors.TokenError;
import errors.ErrorHandler;
import tokens.TokenHandler;
import tokens.Token;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  5,  0,  0,  0,  0,  6,  0,  7,  8,  9,  0, 10,  0, 11, 12, 
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14,  0, 15, 16, 17,  0, 
     0, 18, 18, 19, 20, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 21,  0, 22,  0, 23, 
     0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 18, 18, 33, 34, 35, 36, 
    37, 18, 38, 39, 40, 41, 42, 43, 18, 44, 18, 45, 46, 47,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\1\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\17\13\1\20\1\1\1\21\1\22"+
    "\1\23\1\0\1\2\1\0\1\24\1\25\1\26\6\13"+
    "\1\27\22\13\1\30\1\0\1\31\22\13\1\32\10\13"+
    "\1\0\3\13\1\33\4\13\1\34\12\13\1\35\2\13"+
    "\1\36\1\13\1\37\1\40\1\0\3\13\1\41\4\13"+
    "\1\42\7\13\1\43\4\13\1\2\7\13\1\44\3\13"+
    "\1\45\1\46\1\13\1\47\11\13\1\50\2\13\1\51"+
    "\2\13\1\52\3\13\1\53\3\13\1\54\6\13\1\55"+
    "\2\13\1\56\2\13\1\57\12\13\1\60\2\13\1\61"+
    "\1\13\1\62\11\13\1\63\1\64\1\65\7\13\1\66"+
    "\1\13\1\67\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\60\0\220\0\300\0\60\0\60"+
    "\0\60\0\360\0\u0120\0\60\0\u0150\0\u0180\0\u01b0\0\u01e0"+
    "\0\u01e0\0\u01e0\0\60\0\60\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\u0480\0\u04b0\0\60\0\u04e0\0\60\0\60\0\60"+
    "\0\u0510\0\u0540\0\u0570\0\60\0\60\0\60\0\u05a0\0\u05d0"+
    "\0\u0600\0\u0630\0\u0660\0\u0690\0\u01e0\0\u06c0\0\u06f0\0\u0720"+
    "\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0"+
    "\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\60"+
    "\0\u0a20\0\u0570\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40"+
    "\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0"+
    "\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u01e0\0\u0db0\0\u0de0\0\u0e10"+
    "\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90"+
    "\0\u0fc0\0\u01e0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u01e0\0\u10b0"+
    "\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230"+
    "\0\u1260\0\u01e0\0\u1290\0\u12c0\0\u01e0\0\u12f0\0\u01e0\0\u01e0"+
    "\0\u1320\0\u1350\0\u1380\0\u13b0\0\u01e0\0\u13e0\0\u1410\0\u1440"+
    "\0\u1470\0\u01e0\0\u14a0\0\u14d0\0\u1500\0\u1530\0\u1560\0\u1590"+
    "\0\u15c0\0\u01e0\0\u15f0\0\u1620\0\u1650\0\u1680\0\u0510\0\u16b0"+
    "\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u01e0\0\u1800"+
    "\0\u1830\0\u1860\0\u01e0\0\u01e0\0\u1890\0\u01e0\0\u18c0\0\u18f0"+
    "\0\u1920\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u1a10\0\u1a40\0\u01e0"+
    "\0\u1a70\0\u1aa0\0\u01e0\0\u1ad0\0\u1b00\0\u01e0\0\u1b30\0\u1b60"+
    "\0\u1b90\0\u01e0\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80\0\u1cb0"+
    "\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u01e0\0\u1da0\0\u1dd0\0\u01e0"+
    "\0\u1e00\0\u1e30\0\u01e0\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20"+
    "\0\u1f50\0\u1f80\0\u1fb0\0\u1fe0\0\u2010\0\u01e0\0\u2040\0\u2070"+
    "\0\u01e0\0\u20a0\0\u01e0\0\u20d0\0\u2100\0\u2130\0\u2160\0\u2190"+
    "\0\u21c0\0\u21f0\0\u2220\0\u2250\0\u01e0\0\u01e0\0\u01e0\0\u2280"+
    "\0\u22b0\0\u22e0\0\u2310\0\u2340\0\u2370\0\u23a0\0\u01e0\0\u23d0"+
    "\0\u01e0\0\u01e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\3\1\5\1\6\1\7"+
    "\1\10\1\2\1\11\1\2\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\2"+
    "\1\20\1\25\1\26\1\27\1\30\1\31\1\32\1\20"+
    "\1\33\1\34\1\35\1\20\1\36\1\37\1\40\1\41"+
    "\1\42\2\20\1\43\1\20\1\44\1\45\1\46\61\0"+
    "\1\3\2\0\1\3\73\0\1\47\45\0\1\50\62\0"+
    "\1\51\2\0\1\52\56\0\1\53\1\0\1\13\62\0"+
    "\1\54\57\0\1\55\57\0\1\56\54\0\1\20\4\0"+
    "\3\20\2\0\26\20\20\0\1\20\4\0\3\20\2\0"+
    "\5\20\1\57\20\20\20\0\1\20\4\0\3\20\2\0"+
    "\15\20\1\60\10\20\20\0\1\20\4\0\3\20\2\0"+
    "\5\20\1\61\20\20\20\0\1\20\4\0\3\20\2\0"+
    "\12\20\1\62\13\20\20\0\1\20\4\0\3\20\2\0"+
    "\1\20\1\63\24\20\20\0\1\20\4\0\3\20\2\0"+
    "\5\20\1\64\20\20\20\0\1\20\4\0\3\20\2\0"+
    "\6\20\1\65\5\20\1\66\11\20\20\0\1\20\4\0"+
    "\3\20\2\0\1\20\1\67\24\20\20\0\1\20\4\0"+
    "\3\20\2\0\1\20\1\70\20\20\1\71\3\20\20\0"+
    "\1\20\4\0\3\20\2\0\16\20\1\72\7\20\20\0"+
    "\1\20\4\0\3\20\2\0\12\20\1\73\7\20\1\74"+
    "\3\20\20\0\1\20\4\0\3\20\2\0\1\20\1\75"+
    "\3\20\1\76\7\20\1\77\4\20\1\100\3\20\20\0"+
    "\1\20\4\0\3\20\2\0\3\20\1\101\1\20\1\102"+
    "\13\20\1\103\4\20\20\0\1\20\4\0\3\20\2\0"+
    "\10\20\1\104\4\20\1\105\1\20\1\106\6\20\20\0"+
    "\1\20\4\0\3\20\2\0\11\20\1\107\14\20\61\0"+
    "\1\110\1\0\11\51\1\111\46\51\2\52\3\0\53\52"+
    "\15\0\1\112\57\0\1\20\4\0\3\20\2\0\21\20"+
    "\1\113\4\20\20\0\1\20\4\0\3\20\2\0\15\20"+
    "\1\114\10\20\20\0\1\20\4\0\3\20\2\0\6\20"+
    "\1\115\17\20\20\0\1\20\4\0\3\20\2\0\20\20"+
    "\1\116\5\20\20\0\1\20\4\0\3\20\2\0\12\20"+
    "\1\117\13\20\20\0\1\20\4\0\3\20\2\0\21\20"+
    "\1\120\4\20\20\0\1\20\4\0\3\20\2\0\11\20"+
    "\1\121\14\20\20\0\1\20\4\0\3\20\2\0\20\20"+
    "\1\122\5\20\20\0\1\20\4\0\3\20\2\0\11\20"+
    "\1\123\7\20\1\124\4\20\20\0\1\20\4\0\3\20"+
    "\2\0\21\20\1\125\4\20\20\0\1\20\4\0\3\20"+
    "\2\0\16\20\1\126\7\20\20\0\1\20\4\0\3\20"+
    "\2\0\1\20\1\127\24\20\20\0\1\20\4\0\3\20"+
    "\2\0\14\20\1\130\11\20\20\0\1\20\4\0\3\20"+
    "\2\0\14\20\1\131\11\20\20\0\1\20\4\0\3\20"+
    "\2\0\24\20\1\132\1\20\20\0\1\20\4\0\3\20"+
    "\2\0\22\20\1\133\3\20\20\0\1\20\4\0\3\20"+
    "\2\0\12\20\1\134\1\20\1\135\11\20\20\0\1\20"+
    "\4\0\3\20\2\0\15\20\1\136\10\20\20\0\1\20"+
    "\4\0\3\20\2\0\5\20\1\137\4\20\1\140\13\20"+
    "\20\0\1\20\4\0\3\20\2\0\17\20\1\141\6\20"+
    "\20\0\1\20\4\0\3\20\2\0\5\20\1\142\20\20"+
    "\20\0\1\20\4\0\3\20\2\0\21\20\1\143\4\20"+
    "\20\0\1\20\4\0\3\20\2\0\22\20\1\144\3\20"+
    "\20\0\1\20\4\0\3\20\2\0\21\20\1\145\4\20"+
    "\3\0\11\51\1\146\2\51\1\4\43\51\15\0\1\20"+
    "\4\0\3\20\2\0\17\20\1\147\6\20\20\0\1\20"+
    "\4\0\3\20\2\0\16\20\1\150\7\20\20\0\1\20"+
    "\4\0\3\20\2\0\5\20\1\151\20\20\20\0\1\20"+
    "\4\0\3\20\2\0\5\20\1\152\20\20\20\0\1\20"+
    "\4\0\3\20\2\0\20\20\1\153\5\20\20\0\1\20"+
    "\4\0\3\20\2\0\1\154\25\20\20\0\1\20\4\0"+
    "\3\20\2\0\21\20\1\155\4\20\20\0\1\20\4\0"+
    "\3\20\2\0\21\20\1\156\4\20\20\0\1\20\4\0"+
    "\3\20\2\0\14\20\1\157\11\20\20\0\1\20\4\0"+
    "\3\20\2\0\3\20\1\160\22\20\20\0\1\20\4\0"+
    "\3\20\2\0\22\20\1\161\3\20\20\0\1\20\4\0"+
    "\3\20\2\0\15\20\1\162\10\20\20\0\1\20\4\0"+
    "\3\20\2\0\25\20\1\163\20\0\1\20\4\0\3\20"+
    "\2\0\11\20\1\164\14\20\20\0\1\20\4\0\3\20"+
    "\2\0\4\20\1\165\21\20\20\0\1\20\4\0\3\20"+
    "\2\0\1\20\1\166\24\20\20\0\1\20\4\0\3\20"+
    "\2\0\14\20\1\167\11\20\20\0\1\20\4\0\3\20"+
    "\2\0\5\20\1\170\20\20\20\0\1\20\4\0\3\20"+
    "\2\0\17\20\1\171\6\20\20\0\1\20\4\0\3\20"+
    "\2\0\4\20\1\172\21\20\20\0\1\20\4\0\3\20"+
    "\2\0\6\20\1\173\17\20\20\0\1\20\4\0\3\20"+
    "\2\0\1\20\1\174\24\20\20\0\1\20\4\0\3\20"+
    "\2\0\14\20\1\175\11\20\20\0\1\20\4\0\3\20"+
    "\2\0\1\20\1\176\24\20\20\0\1\20\4\0\3\20"+
    "\2\0\5\20\1\177\20\20\20\0\1\20\4\0\3\20"+
    "\2\0\10\20\1\200\15\20\3\0\11\51\1\201\46\51"+
    "\15\0\1\20\4\0\3\20\2\0\1\20\1\202\24\20"+
    "\20\0\1\20\4\0\3\20\2\0\5\20\1\203\20\20"+
    "\20\0\1\20\4\0\3\20\2\0\3\20\1\204\22\20"+
    "\20\0\1\20\4\0\3\20\2\0\5\20\1\205\20\20"+
    "\20\0\1\20\4\0\3\20\2\0\12\20\1\206\1\207"+
    "\12\20\20\0\1\20\4\0\3\20\2\0\11\20\1\210"+
    "\14\20\20\0\1\20\4\0\3\20\2\0\1\211\25\20"+
    "\20\0\1\20\4\0\3\20\2\0\10\20\1\212\15\20"+
    "\20\0\1\20\4\0\3\20\2\0\1\20\1\213\24\20"+
    "\20\0\1\20\4\0\3\20\2\0\14\20\1\214\11\20"+
    "\20\0\1\20\4\0\3\20\2\0\5\20\1\215\20\20"+
    "\20\0\1\20\4\0\3\20\2\0\20\20\1\216\5\20"+
    "\20\0\1\20\4\0\3\20\2\0\15\20\1\217\10\20"+
    "\20\0\1\20\4\0\3\20\2\0\17\20\1\220\6\20"+
    "\20\0\1\20\4\0\3\20\2\0\4\20\1\221\21\20"+
    "\20\0\1\20\4\0\3\20\2\0\20\20\1\222\5\20"+
    "\20\0\1\20\4\0\3\20\2\0\11\20\1\223\14\20"+
    "\20\0\1\20\4\0\3\20\2\0\1\224\25\20\20\0"+
    "\1\20\4\0\3\20\2\0\21\20\1\225\4\20\20\0"+
    "\1\20\4\0\3\20\2\0\12\20\1\226\13\20\3\0"+
    "\11\51\1\201\2\51\1\227\43\51\15\0\1\20\4\0"+
    "\3\20\2\0\25\20\1\230\20\0\1\20\4\0\3\20"+
    "\2\0\17\20\1\231\6\20\20\0\1\20\4\0\3\20"+
    "\2\0\21\20\1\232\4\20\20\0\1\20\4\0\3\20"+
    "\2\0\1\20\1\233\24\20\20\0\1\20\4\0\3\20"+
    "\2\0\15\20\1\234\10\20\20\0\1\20\4\0\3\20"+
    "\2\0\1\20\1\235\24\20\20\0\1\20\4\0\3\20"+
    "\2\0\13\20\1\236\12\20\20\0\1\20\4\0\3\20"+
    "\2\0\12\20\1\237\13\20\20\0\1\20\4\0\3\20"+
    "\2\0\5\20\1\240\20\20\20\0\1\20\4\0\3\20"+
    "\2\0\17\20\1\241\6\20\20\0\1\20\4\0\3\20"+
    "\2\0\10\20\1\242\15\20\20\0\1\20\4\0\3\20"+
    "\2\0\13\20\1\243\12\20\20\0\1\20\4\0\3\20"+
    "\2\0\4\20\1\244\21\20\20\0\1\20\4\0\3\20"+
    "\2\0\1\245\17\20\1\246\5\20\20\0\1\20\4\0"+
    "\3\20\2\0\14\20\1\247\11\20\20\0\1\20\4\0"+
    "\3\20\2\0\10\20\1\250\15\20\20\0\1\20\4\0"+
    "\3\20\2\0\5\20\1\251\20\20\20\0\1\20\4\0"+
    "\3\20\2\0\1\252\25\20\20\0\1\20\4\0\3\20"+
    "\2\0\1\20\1\253\24\20\20\0\1\20\4\0\3\20"+
    "\2\0\1\20\1\254\24\20\20\0\1\20\4\0\3\20"+
    "\2\0\11\20\1\255\14\20\20\0\1\20\4\0\3\20"+
    "\2\0\20\20\1\256\5\20\20\0\1\20\4\0\3\20"+
    "\2\0\23\20\1\257\2\20\20\0\1\20\4\0\3\20"+
    "\2\0\12\20\1\260\13\20\20\0\1\20\4\0\3\20"+
    "\2\0\15\20\1\261\10\20\20\0\1\20\4\0\3\20"+
    "\2\0\14\20\1\262\11\20\20\0\1\20\4\0\3\20"+
    "\2\0\20\20\1\263\5\20\20\0\1\20\4\0\3\20"+
    "\2\0\13\20\1\264\12\20\20\0\1\20\4\0\3\20"+
    "\2\0\14\20\1\265\11\20\20\0\1\20\4\0\3\20"+
    "\2\0\7\20\1\266\16\20\20\0\1\20\4\0\3\20"+
    "\2\0\11\20\1\267\14\20\20\0\1\20\4\0\3\20"+
    "\2\0\7\20\1\270\16\20\20\0\1\20\4\0\3\20"+
    "\2\0\17\20\1\271\6\20\20\0\1\20\4\0\3\20"+
    "\2\0\12\20\1\272\13\20\20\0\1\20\4\0\3\20"+
    "\2\0\21\20\1\273\4\20\20\0\1\20\4\0\3\20"+
    "\2\0\15\20\1\274\10\20\20\0\1\20\4\0\3\20"+
    "\2\0\21\20\1\275\4\20\20\0\1\20\4\0\3\20"+
    "\2\0\5\20\1\276\20\20\20\0\1\20\4\0\3\20"+
    "\2\0\23\20\1\277\2\20\20\0\1\20\4\0\3\20"+
    "\2\0\21\20\1\300\4\20\20\0\1\20\4\0\3\20"+
    "\2\0\5\20\1\301\20\20\20\0\1\20\4\0\3\20"+
    "\2\0\22\20\1\302\3\20\20\0\1\20\4\0\3\20"+
    "\2\0\20\20\1\303\5\20\20\0\1\20\4\0\3\20"+
    "\2\0\11\20\1\304\13\20\1\305\20\0\1\20\4\0"+
    "\3\20\2\0\15\20\1\306\10\20\20\0\1\20\4\0"+
    "\3\20\2\0\11\20\1\307\14\20\20\0\1\20\4\0"+
    "\3\20\2\0\14\20\1\310\11\20\20\0\1\20\4\0"+
    "\3\20\2\0\1\311\25\20\20\0\1\20\4\0\3\20"+
    "\2\0\20\20\1\312\5\20\20\0\1\20\4\0\3\20"+
    "\2\0\5\20\1\313\20\20\20\0\1\20\4\0\3\20"+
    "\2\0\1\314\25\20\20\0\1\20\4\0\3\20\2\0"+
    "\14\20\1\315\11\20\20\0\1\20\4\0\3\20\2\0"+
    "\13\20\1\316\12\20\20\0\1\20\4\0\3\20\2\0"+
    "\21\20\1\317\4\20\20\0\1\20\4\0\3\20\2\0"+
    "\5\20\1\320\20\20\20\0\1\20\4\0\3\20\2\0"+
    "\22\20\1\321\3\20\20\0\1\20\4\0\3\20\2\0"+
    "\15\20\1\322\10\20\20\0\1\20\4\0\3\20\2\0"+
    "\14\20\1\323\11\20\20\0\1\20\4\0\3\20\2\0"+
    "\1\324\25\20\20\0\1\20\4\0\3\20\2\0\10\20"+
    "\1\325\15\20\20\0\1\20\4\0\3\20\2\0\21\20"+
    "\1\326\4\20\20\0\1\20\4\0\3\20\2\0\2\20"+
    "\1\327\23\20\20\0\1\20\4\0\3\20\2\0\15\20"+
    "\1\330\10\20\20\0\1\20\4\0\3\20\2\0\20\20"+
    "\1\331\5\20\20\0\1\20\4\0\3\20\2\0\14\20"+
    "\1\332\11\20\20\0\1\20\4\0\3\20\2\0\14\20"+
    "\1\333\11\20\20\0\1\20\4\0\3\20\2\0\1\334"+
    "\25\20\20\0\1\20\4\0\3\20\2\0\3\20\1\335"+
    "\22\20\20\0\1\20\4\0\3\20\2\0\11\20\1\336"+
    "\14\20\20\0\1\20\4\0\3\20\2\0\5\20\1\337"+
    "\20\20\20\0\1\20\4\0\3\20\2\0\17\20\1\340"+
    "\6\20\20\0\1\20\4\0\3\20\2\0\4\20\1\341"+
    "\21\20\20\0\1\20\4\0\3\20\2\0\13\20\1\342"+
    "\12\20\20\0\1\20\4\0\3\20\2\0\15\20\1\343"+
    "\10\20\20\0\1\20\4\0\3\20\2\0\20\20\1\344"+
    "\5\20\20\0\1\20\4\0\3\20\2\0\17\20\1\345"+
    "\6\20\20\0\1\20\4\0\3\20\2\0\25\20\1\346"+
    "\20\0\1\20\4\0\3\20\2\0\20\20\1\347\5\20"+
    "\20\0\1\20\4\0\3\20\2\0\15\20\1\350\10\20"+
    "\20\0\1\20\4\0\3\20\2\0\22\20\1\351\3\20"+
    "\20\0\1\20\4\0\3\20\2\0\21\20\1\352\4\20"+
    "\20\0\1\20\4\0\3\20\2\0\23\20\1\353\2\20"+
    "\20\0\1\20\4\0\3\20\2\0\14\20\1\354\11\20"+
    "\20\0\1\20\4\0\3\20\2\0\15\20\1\355\10\20"+
    "\20\0\1\20\4\0\3\20\2\0\5\20\1\356\20\20"+
    "\20\0\1\20\4\0\3\20\2\0\21\20\1\357\4\20"+
    "\20\0\1\20\4\0\3\20\2\0\17\20\1\360\6\20"+
    "\20\0\1\20\4\0\3\20\2\0\20\20\1\361\5\20"+
    "\20\0\1\20\4\0\3\20\2\0\25\20\1\362\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9216];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\3\11\2\1\1\11"+
    "\6\1\2\11\17\1\1\11\1\1\3\11\1\0\1\1"+
    "\1\0\3\11\31\1\1\11\1\0\34\1\1\0\32\1"+
    "\1\0\161\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private TokenHandler tokenHandler = TokenHandler.getInstance();

    private Symbol addToken(int type, String value) {
        Token token = new Token(
            type,
            ParserSym.terminalNames[type],
            value,
            yyline + 1,
            yycolumn + 1
        );
        tokenHandler.addToken(token);
        return new Symbol(type, yyline, yycolumn, value);
    }

    private ErrorHandler errorHandler = ErrorHandler.getInstance();

    private void addError(String type, String lexeme, String message) {
        TokenError error = new TokenError(
            type,
            yyline + 1,
            yycolumn + 1,
            lexeme,
            message,
            "Lexical analysis error",
            "Lexer.jflex"
        );
        errorHandler.addError(error);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      yyline = 0;
    yycolumn = 0;
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return addToken(ParserSym.EOF, "EOF");
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { addError("Lexical", yytext(), "Unrecognized character");
    return addToken(ParserSym.error, yytext());
            }
          // fall through
          case 57: break;
          case 2:
            { 
            }
          // fall through
          case 58: break;
          case 3:
            { return addToken(ParserSym.NOT, yytext());
            }
          // fall through
          case 59: break;
          case 4:
            { return addToken(ParserSym.LPAREN, yytext());
            }
          // fall through
          case 60: break;
          case 5:
            { return addToken(ParserSym.RPAREN, yytext());
            }
          // fall through
          case 61: break;
          case 6:
            { return addToken(ParserSym.COMMA, yytext());
            }
          // fall through
          case 62: break;
          case 7:
            { return addToken(ParserSym.INTLIT, yytext());
            }
          // fall through
          case 63: break;
          case 8:
            { return addToken(ParserSym.COLON, yytext());
            }
          // fall through
          case 64: break;
          case 9:
            { return addToken(ParserSym.LT, yytext());
            }
          // fall through
          case 65: break;
          case 10:
            { return addToken(ParserSym.GT, yytext());
            }
          // fall through
          case 66: break;
          case 11:
            { return addToken(ParserSym.ID, yytext());
            }
          // fall through
          case 67: break;
          case 12:
            { return addToken(ParserSym.C, yytext());
            }
          // fall through
          case 68: break;
          case 13:
            { return addToken(ParserSym.D, yytext());
            }
          // fall through
          case 69: break;
          case 14:
            { return addToken(ParserSym.LBRACKET, yytext());
            }
          // fall through
          case 70: break;
          case 15:
            { return addToken(ParserSym.RBRACKET, yytext());
            }
          // fall through
          case 71: break;
          case 16:
            { return addToken(ParserSym.LBRACE, yytext());
            }
          // fall through
          case 72: break;
          case 17:
            { return addToken(ParserSym.RBRACE, yytext());
            }
          // fall through
          case 73: break;
          case 18:
            { return addToken(ParserSym.NEQ, yytext());
            }
          // fall through
          case 74: break;
          case 19:
            { return addToken(ParserSym.AND, yytext());
            }
          // fall through
          case 75: break;
          case 20:
            { return addToken(ParserSym.LE, yytext());
            }
          // fall through
          case 76: break;
          case 21:
            { return addToken(ParserSym.EQ, yytext());
            }
          // fall through
          case 77: break;
          case 22:
            { return addToken(ParserSym.GE, yytext());
            }
          // fall through
          case 78: break;
          case 23:
            { return addToken(ParserSym.IF, yytext());
            }
          // fall through
          case 79: break;
          case 24:
            { return addToken(ParserSym.OR, yytext());
            }
          // fall through
          case 80: break;
          case 25:
            { return addToken(ParserSym.FLOATLIT, yytext());
            }
          // fall through
          case 81: break;
          case 26:
            { return addToken(ParserSym.RUN, yytext());
            }
          // fall through
          case 82: break;
          case 27:
            { return addToken(ParserSym.ELSE, yytext());
            }
          // fall through
          case 83: break;
          case 28:
            { return addToken(ParserSym.MAIN, yytext());
            }
          // fall through
          case 84: break;
          case 29:
            { return addToken(ParserSym.SEED, yytext());
            }
          // fall through
          case 85: break;
          case 30:
            { return addToken(ParserSym.THEN, yytext());
            }
          // fall through
          case 86: break;
          case 31:
            { return addToken(ParserSym.TRUE, yytext());
            }
          // fall through
          case 87: break;
          case 32:
            { return addToken(ParserSym.WITH, yytext());
            }
          // fall through
          case 88: break;
          case 33:
            { return addToken(ParserSym.FALSE, yytext());
            }
          // fall through
          case 89: break;
          case 34:
            { return addToken(ParserSym.MATCH, yytext());
            }
          // fall through
          case 90: break;
          case 35:
            { return addToken(ParserSym.RULES, yytext());
            }
          // fall through
          case 91: break;
          case 36:
            { return addToken(ParserSym.MUTUAL, yytext());
            }
          // fall through
          case 92: break;
          case 37:
            { return addToken(ParserSym.RANDOM, yytext());
            }
          // fall through
          case 93: break;
          case 38:
            { return addToken(ParserSym.REWARD, yytext());
            }
          // fall through
          case 94: break;
          case 39:
            { return addToken(ParserSym.ROUNDS, yytext());
            }
          // fall through
          case 95: break;
          case 40:
            { return addToken(ParserSym.INITIAL, yytext());
            }
          // fall through
          case 96: break;
          case 41:
            { return addToken(ParserSym.PLAYERS, yytext());
            }
          // fall through
          case 97: break;
          case 42:
            { return addToken(ParserSym.SCORING, yytext());
            }
          // fall through
          case 98: break;
          case 43:
            { return addToken(ParserSym.BETRAYAL, yytext());
            }
          // fall through
          case 99: break;
          case 44:
            { return addToken(ParserSym.GET_MOVE, yytext());
            }
          // fall through
          case 100: break;
          case 45:
            { return addToken(ParserSym.STRATEGY, yytext());
            }
          // fall through
          case 101: break;
          case 46:
            { return addToken(ParserSym.DEFECTION, yytext());
            }
          // fall through
          case 102: break;
          case 47:
            { return addToken(ParserSym.LAST_MOVE, yytext());
            }
          // fall through
          case 103: break;
          case 48:
            { return addToken(ParserSym.PUNISHMENT, yytext());
            }
          // fall through
          case 104: break;
          case 49:
            { return addToken(ParserSym.STRATEGIES, yytext());
            }
          // fall through
          case 105: break;
          case 50:
            { return addToken(ParserSym.COOPERATION, yytext());
            }
          // fall through
          case 106: break;
          case 51:
            { return addToken(ParserSym.ROUND_NUMBER, yytext());
            }
          // fall through
          case 107: break;
          case 52:
            { return addToken(ParserSym.SELF_HISTORY, yytext());
            }
          // fall through
          case 108: break;
          case 53:
            { return addToken(ParserSym.TOTAL_ROUNDS, yytext());
            }
          // fall through
          case 109: break;
          case 54:
            { return addToken(ParserSym.GET_MOVES_COUNT, yytext());
            }
          // fall through
          case 110: break;
          case 55:
            { return addToken(ParserSym.GET_LAST_N_MOVES, yytext());
            }
          // fall through
          case 111: break;
          case 56:
            { return addToken(ParserSym.OPPONENT_HISTORY, yytext());
            }
          // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
